const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');
const { execute } = require('../../events/client/ready');
const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const { Birthday } = require(`../../schemas/birthday`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`birthday`)
        .setDescription(`–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏.`)
        .addSubcommand(subcommand => subcommand
            .setName(`set`)
            .setDescription(`–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`)
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç—å, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`)
                .setRequired(true)
            )
            .addIntegerOption(option => option
                .setName(`–¥–µ–Ω—å`)
                .setDescription(`–ß–∏—Å–ª–æ, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.`)
                .setRequired(true)
            )
            .addIntegerOption(option => option
                .setName(`–º–µ—Å—è—Ü`)
                .setDescription(`–ß–∏—Å–ª–æ, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.`)
                .setRequired(true)
            )
            .addIntegerOption(option => option
                .setName(`–≥–æ–¥`)
                .setDescription(`–ì–æ–¥, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.`)
                .setRequired(true)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`remove`)
            .setDescription(`–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`)
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç—å, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`)
                .setRequired(true)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`list`)
            .setDescription(`–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 10 –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`check`)
            .setDescription(`–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç—å, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`)
                .setRequired(true)
            )
        ),

    async execute(interaction, client) {
        if (!interaction.member.roles.cache.has(`320880176416161802`)) {
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                })
                .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(`320880176416161802`).name}\`!`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
        }

        switch (interaction.options.getSubcommand()) {
            case `set`: {
                const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                const date = new Date()
                const currentYear = date.getFullYear()
                const currentMonth = date.getMonth() + 1
                const currentDay = date.getDay()

                const Day = interaction.options.getInteger(`–¥–µ–Ω—å`)
                const Month = interaction.options.getInteger(`–º–µ—Å—è—Ü`)
                const Year = interaction.options.getInteger(`–≥–æ–¥`)

                if (Day > 31 || Day <= 0) return interaction.reply({
                    content: `–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 31!`,
                    ephemeral: true
                })

                if (Month > 12 || Month <= 0) return interaction.reply({
                    content: `–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 12!`,
                    ephemeral: true
                })

                if (Year >= currentYear) return interaction.reply({
                    content: `–¢–µ–∫—É—â–∏–π –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞!`,
                    ephemeral: true
                })
                await interaction.deferReply({
                    fetchReply: true
                })
                const oneDay = 1000 * 60 * 60 * 24

                const firstDate = new Date(currentYear, Month, Day)
                const secondDate = new Date(currentYear, currentMonth, currentDay)

                let diffDays = Math.round((firstDate - secondDate) / oneDay)

                let dayCount

                if (new Date(currentYear, 1, 29).getDate() === 29) {
                    dayCount = 366
                } else {
                    dayCount = 365
                }

                let remDays
                let wishYear

                if (diffDays > 0) {
                    remDays = diffDays
                    wishYear = currentYear
                } else {
                    remDays = diffDays + dayCount
                    wishYear = currentYear + 1
                }

                const age = toOrdinalSuffix(wishYear - Year)
                console.log(`1`)
                const bdata = await Birthday.findOne({ guildid: interaction.guild.id, userid: user.id })


                console.log(`2`)
                console.log(`3`)
                if (bdata) {
                    console.log(`4`)
                    bdata.delete()
                    console.log(`5`)
                    const newbdata = new Birthday({
                        guildid: interaction.guild.id,
                        userid: user.id,
                        day: Day,
                        month: Month,
                        year: Year
                    })
                    console.log(`6`)
                    await newbdata.save()
                    console.log(`7`)
                } else {
                    console.log(`8`)
                    const newbdata = new Birthday({
                        guildid: interaction.guild.id,
                        userid: user.id,
                        day: Day,
                        month: Month,
                        year: Year
                    })
                    console.log(`9`)

                    await newbdata.save()
                    console.log(`10`)
                }
                console.log(`11`)
                const b_embed = new EmbedBuilder()
                    .setTitle(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è`)
                    .setColor(process.env.bot_color)
                    .setThumbnail(user.displayAvatarURL())
                    .setDescription(`üéÇ –Ø –ø–æ–∑–¥—Ä–∞–≤–ª—é ${user} —Å **${age}** –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${remDays} –¥–Ω/, **${Day}.${Month}.${wishYear}**!`)
                console.log(`12`)
                await interaction.editReply({
                    embeds: [b_embed]
                })
                console.log(`13`)

            }

                break;
            case `remove`: {
                const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                const to_remove = await Birthday.findOne({ guildid: interaction.guild.id, userid: user.id })
                if (to_remove) {
                    to_remove.delete()

                    const b_embed = new EmbedBuilder()
                        .setTitle(`–£–¥–∞–ª—ë–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è`)
                        .setColor(process.env.bot_color)
                        .setThumbnail(user.displayAvatarURL())
                        .setDescription(`‚úÖ - –£–¥–∞–ª—ë–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user}!`)
                    await interaction.reply({
                        embeds: [b_embed],
                        ephemeral: true
                    })

                } else {
                    const b_embed = new EmbedBuilder()
                        .setTitle(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`)
                        .setColor(process.env.bot_color)
                        .setThumbnail(user.displayAvatarURL())
                        .setDescription(`‚ùå - –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${user} –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ —Å–º–æ–≥ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å!`)

                    await interaction.reply({
                        embeds: [b_embed],
                        ephemeral: true
                    })
                }

            }

                break;
            case `list`: {
                const listData = await Birthday.find({ guildid: interaction.guild.id })

                const no_bd = new EmbedBuilder()
                    .setTitle(`–ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π`)
                    .setColor(process.env.bot_color)
                    .setThumbnail(interaction.guild.iconURL())
                    .setDescription(`‚ùå - –ù–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π, –æ—á–µ–Ω—å –∂–∞–ª—å :'(`)
                if (!listData) return interaction.reply({
                    embeds: [no_bd],
                    ephemeral: true
                })

                await interaction.deferReply()

                const date = new Date()
                const currentYear = date.getFullYear()

                let index = 1
                listData.sort((a, b) => new Date(`${a.year} ${a.month} ${a.day}`) - new Date(`${b.year} ${b.month} ${b.day}`))

                const birthdayData = listData.map((d) => {
                    return `**${index++}.** \`${d.day}.${d.month}.${d.year}\` - ${client.users.cache.get(d.userid)} (${currentYear - d.year})`
                }).join("\n")

                const list = new EmbedBuilder()
                    .setTitle(`–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π`)
                    .setThumbnail(interaction.guild.iconURL())
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`${birthdayData}`)

                await interaction.editReply({
                    embeds: [list]
                })

            }

                break;
            case `check`: {
                const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                const listData = await Birthday.findOne({ guildid: interaction.guild.id, userid: user.id })
                const no_bd = new EmbedBuilder()
                    .setTitle(`–ù–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è`)
                    .setColor(process.env.bot_color)
                    .setThumbnail(interaction.guild.iconURL())
                    .setDescription(`‚ùå - –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –æ—á–µ–Ω—å –∂–∞–ª—å :'(`)
                if (!listData) return interaction.reply({
                    embeds: [no_bd],
                    ephemeral: true
                })

                const list = new EmbedBuilder()
                    .setTitle(`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${user.username}`)
                    .setThumbnail(user.displayAvatarURL())
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`üéÇ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è \`${listData.day}.${listData.month}.${listData.year}\`!`)

                await interaction.reply({
                    embeds: [list]
                })

            }

                break;

            default:
                break;
        }
    }
};

function toOrdinalSuffix(num) {
    const int = parseInt(num), digits = [int % 10, int % 100], ordinals = [`-—ã–º`, `-—ã–º`, `-–∏–º`, `-—ã–º`], oPattern = [1, 2, 3, 4], tPattern = [11, 12, 13, 14, 15, 16, 17, 18, 19]

    return oPattern.includes(digits[0]) && !tPattern.includes(digits[1])
        ? int + ordinals[digits[0] - 1]
        : int + ordinals[3]
}
