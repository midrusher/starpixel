const { SlashCommandBuilder, EmbedBuilder, Embed, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');
const { execute } = require('../../events/client/start_bot/ready');
const wait = require('node:timers/promises').setTimeout;
const ch_list = require(`../../discord structure/channels.json`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`done`)
        .setDescription(`–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞–º`)
        .addUserOption(option => option
            .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å')
            .setRequired(true)
        )
        .addStringOption(option => option
            .setName(`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`)
            .setDescription(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–æ–ø—Ä–æ—Å—É`)
            .setRequired(false)
        ),
    async execute(interaction, client) {

        const cmd_name = `done`
        const mod = interaction.member;
        const user = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const comment = interaction.options.getString(`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`)
        const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                })
                .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(`563793535250464809`).name}\`!
–ù–æ –≤—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \`/profile update\``)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

        if (!interaction.member.roles.cache.has(`563793535250464809`)) return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
        
        const button_done = new ButtonBuilder()
            .setCustomId('done')
            .setLabel('–°–ø–∞—Å–∏–±–æ!')
            .setStyle(ButtonStyle.Primary)
            .setEmoji(`üëå`);

        const done2 = new EmbedBuilder()
            .setColor(0xA872FF)
            .setAuthor({
                name: `–ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`
            })
            .setDescription(`–ü—Ä–æ—Å—å–±–µ ${user} –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–º ${mod}!`)
        interaction.reply({
            embeds: [done2]
        })


        console.log(
            `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /${cmd_name}
–û—Ñ–∏—Ü–µ—Ä: ${mod.displayName}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.tag}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`)

        if (!comment) {
            const done = new EmbedBuilder()
                .setAuthor({
                    name: `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º!`
                })
                .setColor(0xA872FF)
                .setTimestamp(Date.now())
                .setDescription(`:envelope: –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º. –í–∞—à–∞ –ø—Ä–æ—Å—å–±–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!`)
                .addFields([{
                    name: `–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –æ—Ñ–∏—Ü–µ—Ä`, value: `${mod}`
                }]);

            const msg = await interaction.guild.channels.cache.get(ch_list.main).send({
                content: `${user}`,
                embeds: [done],
                components: [new ActionRowBuilder().addComponents(button_done)]
            })

            const filter = i => i.customId === 'done';

            const collector = msg.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 600000, });

            collector.on('collect', i => {
                if (i.user.id === user.id) {
                        button_done.setDisabled(true)   
                        i.reply({
                            content: `–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∫–∞–Ω–∞–ª <#849516805529927700>!`,
                            ephemeral: true
                        })
                        msg.edit({
                            content: `${user}`,
                            embeds: [done],
                            components: [new ActionRowBuilder().addComponents(button_done)]
                        })
                } else {
                    i.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!`, ephemeral: true });
                }
            });

            collector.on('end', async collected => {
                await button_done.setDisabled(true)
                await msg.edit({
                    content: `${user}`,
                    embeds: [done],
                    components: [new ActionRowBuilder().addComponents(button_done)]
                })
            });

        } else {
            const done = new EmbedBuilder()
                .setAuthor({
                    name: `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º!`
                })
                .setDescription(`:envelope: ${comment}`)
                .setColor(0xA872FF)
                .setTimestamp(Date.now())
                .addFields([{
                    name: `–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –æ—Ñ–∏—Ü–µ—Ä`, value: `${mod}`
                }]);

            const msg = await interaction.guild.channels.cache.get(ch_list.main).send({
                content: `${user}`,
                embeds: [done],
                components: [new ActionRowBuilder().addComponents(button_done)]


            });
            const filter = i => i.customId === 'done';

            const collector = msg.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 600000, });

            collector.on('collect', i => {
                if (i.user.id === user.id) {
                        button_done.setDisabled(true)   
                        i.reply({
                            content: `–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∫–∞–Ω–∞–ª <#849516805529927700>!`,
                            ephemeral: true
                        })
                        msg.edit({
                            content: `${user}`,
                            embeds: [done],
                            components: [new ActionRowBuilder().addComponents(button_done)]
                        })
                } else {
                    i.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!`, ephemeral: true });
                }
            });

            collector.on('end', async collected => {
                await button_done.setDisabled(true)
                await msg.edit({
                    content: `${user}`,
                    embeds: [done],
                    components: [new ActionRowBuilder().addComponents(button_done)]
                })
            });

        };

    }
}