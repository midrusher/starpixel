const { SlashCommandBuilder, Attachment, EmbedBuilder, ActionRowBuilder, SelectMenuBuilder } = require('discord.js');
const { Guild } = require(`../../schemas/guilddata`)
const { User } = require(`../../schemas/userdata`);


module.exports = {
    data: new SlashCommandBuilder()
        .setName(`leaderboard`)
        .setDescription(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º`)
        .setDMPermission(false),
    async execute(interaction, client) {


        const pluginData = await Guild.findOne({ id: interaction.guild.id })
        if (pluginData.plugins.items === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })

        const users = await User.find().then(users => {
            return users.filter(async user => await interaction.guild.members.fetch(user.userid))
        })
        let sort1 = users.sort((a, b) => {
            return b.exp - a.exp
        })
        let sort = sort1.sort((a, b) => {
            return b.level - a.level
        })
        let index = 1
        let map = sort.map(async (user) => {
            const tag = await interaction.guild.members.fetch(user.userid)
            return `**${index++}.** ${tag} > ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`
        })
        let mapProm = await Promise.all(map)


        let embed = new EmbedBuilder()
            .setColor(process.env.bot_color)
            .setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
            .setTimestamp(Date.now())
            .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

        let selectMenu = new ActionRowBuilder()
            .addComponents(
                new SelectMenuBuilder()
                    .setCustomId(`select`)
                    .setPlaceholder(`–í–∏–¥—ã —Ç–∞–±–ª–∏—Ü –ª–∏–¥–µ—Ä–æ–≤`)
                    .addOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: true
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */

                    )
                    .setMinValues(1)
                    .setMaxValues(1)
            )
        const msg = await interaction.reply({
            embeds: [embed],
            components: [selectMenu],
            fetchReply: true
        })

        const collector = msg.createMessageComponentCollector()

        collector.on('collect', async (int) => {
            const value = int.values[0]
            if (interaction.user.id === int.user.id) {
                if (value == `act`) {
                    await int.deferUpdate()
                    sort1 = users.sort((a, b) => {
                        return b.exp - a.exp
                    })
                    sort = sort1.sort((a, b) => {
                        return b.level - a.level
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: true
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `rank`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.rank - a.rank
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.rank}üí†`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: true
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `rumbik`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.rumbik - a.rumbik
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.rumbik}<:Rumbik:883638847056003072>`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: true
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `guild_games`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.visited_games - a.visited_games
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.visited_games}üé≤`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: true
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `tickets`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.tickets - a.tickets
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.tickets}üè∑`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: true
                        },
                        {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        },
                    )

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                }
            } else {
                if (value == `act`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort1 = users.sort((a, b) => {
                        return b.exp - a.exp
                    })
                    sort = sort1.sort((a, b) => {
                        return b.level - a.level
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: true
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `rank`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.rank - a.rank
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.rank}üí†`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: true
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `rumbik`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.rumbik - a.rumbik
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.rumbik}<:Rumbik:883638847056003072>`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: true
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `guild_games`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.visited_games - a.visited_games
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.visited_games}üé≤`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: true
                        },
                        /* {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        }, */
                    )

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `tickets`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.tickets - a.tickets
                    })
                    index = 1
                    map = sort.map(async (user) => {
                        const tag = await interaction.guild.members.fetch(user.userid)
                        return `**${index++}.** ${tag} >> ${user.tickets}üè∑`
                    })
                    mapProm = await Promise.all(map)
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${mapProm.slice(0, 10).join('\n')}`)

                    selectMenu.components[0].setOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: false
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: true
                        },
                        {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        },
                    )

                    await int.editReply({
                        embeds: [embed]
                    })
                }
            }
        })
    }
};