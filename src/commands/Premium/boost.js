const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');
const { execute } = require('../../events/client/ready');
const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`boost`)
        .setDescription(`–ó–∞–±—É—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥–∏–ª—å–¥–∏–∏`)
        .addUserOption(option => option
            .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
            .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—É—Å—Ç–∏—Ç—å`)
            .setRequired(true)
        ),

    async execute(interaction, client) {
        const member = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
        const user = interaction.member
        const userData = await User.findOne({ userid: user.user.id })

        const embed = new EmbedBuilder()
            .setAuthor({
                name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
            })
            .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(`850336260265476096`).name}\`!`)
            .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
            .setColor(`DarkRed`)
            .setTimestamp(Date.now())
        if (!user.roles.cache.has(`850336260265476096`)) return interaction.reply({
            embeds: [embed],
            ephemeral: true
        })

        /* const cd = new EmbedBuilder()
            .setColor(process.env.bot_color)
            .setAuthor({
                name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
            })
            .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.boost - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)
            .setTimestamp(Date.now())
            .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)

        if (userData.cooldowns.boost > Date.now()) return interaction.reply({
            embeds: [cd],
            ephemeral: true
        }); */

        const wrong_member = new EmbedBuilder()
            .setAuthor({
                name: `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`
            })
            .setColor(`DarkRed`)
            .setDescription(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—É—Å—Ç–∏—Ç—å —Å–µ–±—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`)
            .setTimestamp(Date.now())
            .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)

        if (member.id === user.user.id) return interaction.reply({
            embeds: [wrong_member],
            ephemeral: true
        })
        const loot = [
            {
                group: 1,
                name: `–º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É`,
                roleID: `510932601721192458`
            },
            {
                group: 1,
                name: `–º–µ—à–æ—á–µ–∫`,
                roleID: `819930814388240385`
            },
            {
                group: 1,
                name: `–±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É`,
                roleID: `521248091853291540`
            }
        ]

        const r_loot = loot[Math.floor(Math.random() * loot.length)]
        const reply = await interaction.reply({
            content: `‚óæ
**–ë–£–°–¢-–ë–£–°–¢-–ë–£–°–¢!**
                
:zap: :credit_card: ${user} **–ë–£–°–¢–ò–¢** —É—á–∞—Å—Ç–Ω–∏–∫–∞.
${member} –ø–æ–ª—É—á–∞–µ—Ç \`${r_loot.name}\`.
                
**–ë–£–°–¢-–ë–£–°–¢-–ë–£–°–¢!**
‚óæ`,
            fetchReply: true
        })
        if (r_loot.group == 1) {
            if (!member.roles.cache.has(roleID)) {
                member.roles.add(roleID)
                await reply.react(`‚úÖ`)
            } else {
                await reply.react(`üö´`)
            }
        }


        userData.cooldowns.boost = Date.now() + (1000 * 60 * 60 * 24 * 7)
        userData.save()

    }
};