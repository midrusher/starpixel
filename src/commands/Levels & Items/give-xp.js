const { SlashCommandBuilder } = require('discord.js');
const { execute } = require('../../events/client/start_bot/ready');
const { User } = require(`../../schemas/userdata`);
const chalk = require(`chalk`);

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`give-xp`)
        .setDescription(`–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`)
        .addStringOption(option => option
            .setName(`—Ç–∏–ø`)
            .setDescription(`–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞`)
            .setAutocomplete(true)
            .setRequired(true)
        )
        .addUserOption(option => option
            .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç.`)
            .setRequired(true)
        )
        .addNumberOption(option => option
            .setName(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.`)
            .setRequired(true)
        ),

    async autoComplete(interaction, client) {

        const focusedValue = interaction.options.getFocused();
        const choices = ['–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤', '–†—É–º–±–∏–∫–∏'];
        const filtered = choices.filter(choice => choice.startsWith(focusedValue));
        await interaction.respond(
            filtered.map(choice => ({ name: choice, value: choice })),
        );
    },
    async execute(interaction, client) {

        const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`) || interaction.member.user;
        const userData = await User.findOne({ userid: user.id }) || new User({ userid: user.id, name: user.username })
        switch (interaction.options.getString(`—Ç–∏–ø`)) {
            case `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`: {
                userData.exp += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
                userData.totalexp += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
                userData.save();
                interaction.reply(`–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üåÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}!`)
                console.log(chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.exp} –æ–ø—ã—Ç–∞ –∏ ${userData.level} —É—Ä–æ–≤–µ–Ω—å.`))
            };

                break;
            case `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`: {
                userData.rank += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                userData.save();
                interaction.reply(`–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üí† –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.rank} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤!`)
                console.log(chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.rank} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤.`))

            }

                break;
            case `–†—É–º–±–∏–∫–∏`: {
                userData.rumbik += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                userData.save();
                interaction.reply(`–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}<:Rumbik:883638847056003072> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.rumbik} —Ä—É–º–±–∏–∫–æ–≤!`)
                console.log(chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª —Ä—É–º–±–∏–∫–∏]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.rumbik} —Ä—É–º–±–∏–∫–æ–≤.`))
            }

                break;

            default:
                break;
        }
    }
}