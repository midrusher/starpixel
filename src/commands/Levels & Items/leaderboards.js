const { SlashCommandBuilder, Attachment, EmbedBuilder } = require('discord.js');

const { User } = require(`../../schemas/userdata`);


module.exports = {
    data: new SlashCommandBuilder()
        .setName(`leaderboard`)
        .setDescription(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
        .addStringOption(option => option
            .setName(`—Ç–∏–ø`)
            .setRequired(true)
            .setAutocomplete(true)
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤`)
        ),
    async autoComplete(interaction, client) {
        const focusedValue = interaction.options.getFocused();
        const choices = ['–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤', '–†—É–º–±–∏–∫–∏'];
        const filtered = choices.filter(choice => choice.startsWith(focusedValue));
        await interaction.respond(
            filtered.map(choice => ({ name: choice, value: choice })),
        );
    },
    async execute(interaction, client) {
        switch (interaction.options.getString(`—Ç–∏–ø`)) {
            case `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`: {
                const { Guild } = require(`../../schemas/guilddata`)
                const pluginData = await Guild.findOne({ id: interaction.guild.id })
                if (pluginData.plugins.items === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
                await interaction.deferReply({
                    fetchReply: true
                })
                const users = await User.find().then(users => {
                    return users.filter(async user => await interaction.guild.members.fetch(user.userid))
                })
                const sort1 = users.sort((a, b) => {
                    return b.exp - a.exp
                }).slice(0, 10)
                const sort = sort1.sort((a, b) => {
                    return b.level - a.level
                })
                let index = 1
                const map = sort.map(async (user) => {
                    const tag = await interaction.guild.members.fetch(user.userid)
                    return `**${index++}.** ${tag} > ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`
                })
                const mapProm = await Promise.all(map)


                const embed = new EmbedBuilder()
                    .setColor(process.env.bot_color)
                    .setAuthor({
                        name: `–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`
                    })
                    .setTimestamp(Date.now())
                    .setDescription(`${mapProm.join('\n')}`)

                await interaction.editReply({
                    embeds: [embed]
                })
            }

                break;
            case `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`: {
                const { Guild } = require(`../../schemas/guilddata`)
                const pluginData = await Guild.findOne({ id: interaction.guild.id })
                if (pluginData.plugins.items === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
                await interaction.deferReply({
                    fetchReply: true
                })
                const users = await User.find().then(users => {
                    return users.filter(async user => await interaction.guild.members.fetch(user.userid))
                })
                const sort = users.sort((a, b) => {
                    return b.rank - a.rank
                }).slice(0, 10)
                let index = 1
                const map = sort.map(async (user) => {
                    const tag = await interaction.guild.members.fetch(user.userid)
                    return `**${index++}.** ${tag} > –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: ${user.rank}üí†`
                })
                const mapProm = await Promise.all(map)


                const embed = new EmbedBuilder()
                    .setColor(process.env.bot_color)
                    .setAuthor({
                        name: `–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`
                    })
                    .setTimestamp(Date.now())
                    .setDescription(`${mapProm.join('\n')}`)

                await interaction.editReply({
                    embeds: [embed]
                })
            }

                break;
            case `–†—É–º–±–∏–∫–∏`: {
                const { Guild } = require(`../../schemas/guilddata`)
                const pluginData = await Guild.findOne({ id: interaction.guild.id })
                if (pluginData.plugins.items === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
                await interaction.deferReply({
                    fetchReply: true
                })
                const users = await User.find().then(users => {
                    return users.filter(async user => await interaction.guild.members.fetch(user.userid))
                })
                const sort = users.sort((a, b) => {
                    return b.rumbik - a.rumbik
                }).slice(0, 10)
                let index = 1
                const map = sort.map(async (user) => {
                    const tag = await interaction.guild.members.fetch(user.userid)
                    return `**${index++}.** ${tag} > –í—Å–µ–≥–æ —Ä—É–º–±–∏–∫–æ–≤: ${user.rumbik}<:Rumbik:883638847056003072>`
                })
                const mapProm = await Promise.all(map)


                const embed = new EmbedBuilder()
                    .setColor(process.env.bot_color)
                    .setAuthor({
                        name: `–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`
                    })
                    .setTimestamp(Date.now())
                    .setDescription(`${mapProm.join('\n')}`)

                await interaction.editReply({
                    embeds: [embed]
                })
            }

                break;

            default: {
                await interaction.reply({
                    content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                    ephemeral: true
                })
            }
                break;
        }

    }
};