const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, WebhookClient, PermissionsBitField, PermissionFlagsBits, ComponentType } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');
const { execute } = require('../../events/client/start_bot/ready');
const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const { loadImage, createCanvas } = require(`@napi-rs/canvas`)
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const { gameConstructor, calcActLevel, getLevel, isURL, secondPage } = require(`../../functions`);
const { SearchResultType, DisTubeVoice, Song, Playlist } = require('distube');

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`music`)
        .setDescription(`–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç`)
        .setDMPermission(false)
        .addSubcommand(subcommand => subcommand
            .setName(`play`)
            .setDescription(`–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É`)
            .addStringOption(option => option
                .setName(`–∑–∞–ø—Ä–æ—Å`)
                .setDescription(`–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É`)
                .setRequired(true)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`queue`)
            .setDescription(`–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`nowplaying`)
            .setDescription(`–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`volume`)
            .setDescription(`–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤—É–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è`)
            .addIntegerOption(option => option
                .setName(`—á–∏—Å–ª–æ`)
                .setDescription(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è`)
                .setRequired(true)
                .setMaxValue(100)
                .setMinValue(0)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`skip`)
            .setDescription(`–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`previous`)
            .setDescription(`–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Å–Ω—é`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`join`)
            .setDescription(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`leave`)
            .setDescription(`–ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`pause`)
            .setDescription(`–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`resume`)
            .setDescription(`–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`stop`)
            .setDescription(`–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`shuffle`)
            .setDescription(`–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø–µ—Å–Ω–∏`)
        )
        .addSubcommand(subcommand => subcommand
            .setName(`loop`)
            .setDescription(`–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞`)
            .addStringOption(option => option
                .setName(`—Ä–µ–∂–∏–º`)
                .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞`)
                .addChoices(
                    {
                        name: `–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞`,
                        value: `0`
                    },
                    {
                        name: `–ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏`,
                        value: `1`
                    },
                    {
                        name: `–ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏`,
                        value: `2`
                    }

                )
                .setRequired(true)
            )
        ),

    async execute(interaction, client) {
        const guild = interaction.guild
        const pluginData = await Guild.findOne({ id: interaction.guild.id })
        if (pluginData.plugins.music === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
        const guildData = await Guild.findOne({ id: guild.id })
        const music_channel = await guild.channels.fetch(ch_list.music)
        const user = interaction.user
        const member = interaction.member
        if (guildData.guildgames.started == true && !member.roles.cache.has(`523559726219526184`) && !member.roles.cache.has(`563793535250464809`) && !member.roles.cache.has(`320880176416161802`)) return interaction.reply({
            content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞, –ø–æ–∫–∞ –≤ –≥–∏–ª—å–¥–∏–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞!`,
            ephemeral: true
        })
        if (interaction.channel.id !== music_channel.id && !interaction.member.roles.cache.has(`320880176416161802`)) return interaction.reply({
            content: `–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª ${music_channel}!`,
            ephemeral: true
        })
        if (!member.voice) return interaction.reply({
            content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!`,
            ephemeral: true
        })

        switch (interaction.options.getSubcommand()) {
            case `play`: {

                try {
                    const message = interaction.options.getString(`–∑–∞–ø—Ä–æ—Å`)
                    const url = isURL(message)
                    if (url === true) {
                        let received
                        received = new EmbedBuilder()
                            .setTitle(`–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω...`)
                            .setColor(process.env.bot_color)
                            .setDescription(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å: \`${message}\`...`)
                            .setTimestamp(Date.now())


                        await interaction.reply({
                            embeds: [received],
                            fetchReply: true
                        })

                        const connection = await client.distube.voices.join(member.voice.channel).then(async (connection) => {
                            await connection.setSelfDeaf(false)
                            await connection.setSelfMute(false)
                        })

                        client.distube.play(member.voice.channel, message, {
                            member: member,
                            textChannel: interaction.channel
                        })
                        await interaction.deleteReply()

                    } else if (url === false) {

                        const searchR = await client.distube.search(message, {
                            limit: 5,
                            type: SearchResultType.VIDEO
                        })
                        let i = 1
                        const search = searchR.map(result => {
                            return `**${i++}.** ${result.name} - ${result.formattedDuration} \`(${result.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)\``

                        })

                        const results = new EmbedBuilder()
                            .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...`)
                            .setColor(process.env.bot_color)
                            .setDescription(`${search.join(`\n`)}`)
                            .setTimestamp(Date.now())

                        const choices = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`song1`)
                                    .setEmoji(`1Ô∏è‚É£`)
                                    .setLabel(`–ü–µ—Å–Ω—è 1`)
                                    .setStyle(ButtonStyle.Primary)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`song2`)
                                    .setEmoji(`2Ô∏è‚É£`)
                                    .setLabel(`–ü–µ—Å–Ω—è 2`)
                                    .setStyle(ButtonStyle.Primary)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`song3`)
                                    .setEmoji(`3Ô∏è‚É£`)
                                    .setLabel(`–ü–µ—Å–Ω—è 3`)
                                    .setStyle(ButtonStyle.Primary)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`song4`)
                                    .setEmoji(`4Ô∏è‚É£`)
                                    .setLabel(`–ü–µ—Å–Ω—è 4`)
                                    .setStyle(ButtonStyle.Primary)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`song5`)
                                    .setEmoji(`5Ô∏è‚É£`)
                                    .setLabel(`–ü–µ—Å–Ω—è 5`)
                                    .setStyle(ButtonStyle.Primary)
                            )


                        const msg = await interaction.reply({
                            embeds: [results],
                            components: [choices],
                            fetchReply: true
                        })

                        msg.awaitMessageComponent({ componentType: ComponentType.Button, time: 60000 })
                            .then(async (i) => {
                                let playSong
                                if (i.customId == `song1`) {
                                    playSong = searchR[0].url
                                } else if (i.customId == `song2`) {
                                    playSong = searchR[1].url
                                } else if (i.customId == `song3`) {
                                    playSong = searchR[2].url
                                } else if (i.customId == `song4`) {
                                    playSong = searchR[3].url
                                } else if (i.customId == `song5`) {
                                    playSong = searchR[4].url
                                }

                                const connection = await client.distube.voices.join(member.voice.channel).then(async (connection) => {
                                    await connection.setSelfDeaf(false)
                                    await connection.setSelfMute(false)
                                })
                                client.distube.play(member.voice.channel, playSong, {
                                    member: member,
                                    textChannel: interaction.channel
                                })




                                const received = new EmbedBuilder()
                                    .setTitle(`–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω...`)
                                    .setColor(process.env.bot_color)
                                    .setDescription(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Å–Ω—é \`${playSong}\`...`)
                                    .setTimestamp(Date.now())

                                await i.channel.send({
                                    embeds: [received]
                                })
                                await interaction.deleteReply()
                            })
                            .catch(async (error) => {
                                console.log(error)
                                const err = new EmbedBuilder()
                                    .setTitle(`‚ùå –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ!`)
                                    .setDescription(`–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/music play\` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!`)
                                    .setColor(process.env.bot_color)
                                    .setTimestamp(Date.now())

                                await choices.components[0].setDisabled(true)
                                await choices.components[1].setDisabled(true)
                                await choices.components[2].setDisabled(true)
                                await choices.components[3].setDisabled(true)
                                await choices.components[4].setDisabled(true)

                                await interaction.editReply({
                                    embeds: [err],
                                    components: [choices]
                                })
                            })
                    }
                } catch (e) {
                    await interaction.reply({
                        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏...`,
                        ephemeral: true
                    })
                    console.log(e)
                }

            }
                break;
            case `queue`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })
                let n = 0
                let listS = queue.songs.map((song, id) => {
                    if (queue.songs[0] == song) {
                        return `**${id + 1}**. [${song.name}](${song.url}) - \`${song.formattedDuration}\` **–°–ï–ô–ß–ê–° –ò–ì–†–ê–ï–¢**`
                    } else {
                        return `**${id + 1}**. [${song.name}](${song.url}) - \`${song.formattedDuration}\``
                    }
                })
                let list = listS.slice(0 + (n * 10), 10 + (n * 10))

                const totalPages = Math.ceil(queue.songs.length / 10)

                const queueList = new EmbedBuilder()
                    .setTitle(`–û—á–µ—Ä–µ–¥—å –ø–µ—Å–µ–Ω`)
                    .setDescription(`${list.join(`\n`)}`)
                    .setTimestamp(Date.now())
                    .setColor(process.env.bot_color)
                    .setThumbnail(guild.iconURL())
                    .setFooter({
                        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                    })

                const pages = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`first`)
                            .setEmoji(`‚è™`)
                            .setStyle(ButtonStyle.Danger)
                            .setDisabled(true)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`prev`)
                            .setEmoji(`‚¨Ö`)
                            .setStyle(ButtonStyle.Danger)
                            .setDisabled(true)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`stop`)
                            .setEmoji(`‚èπ`)
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(false)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`next`)
                            .setEmoji(`‚û°`)
                            .setStyle(ButtonStyle.Success)
                            .setDisabled(secondPage(totalPages))
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`last`)
                            .setEmoji(`‚è©`)
                            .setStyle(ButtonStyle.Success)
                            .setDisabled(secondPage(totalPages))
                    )

                let msg = await interaction.reply({
                    embeds: [queueList],
                    components: [pages],
                    fetchReply: true
                })

                const collector = msg.createMessageComponentCollector({ componentType: ComponentType.Button, time: 120000 })
                collector.on(`collect`, async (i) => {
                    if (i.user.id === user.id) {
                        if (i.customId == `first`) {
                            n = 0
                            list = listS.slice(0 + (n * 10), 10 + (n * 10))
                            queueList.setDescription(`${list.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            pages.components[0].setDisabled(true)
                            pages.components[1].setDisabled(true)
                            pages.components[2].setDisabled(false)
                            pages.components[3].setDisabled(false)
                            pages.components[4].setDisabled(false)
                            await i.deferUpdate()
                            await interaction.editReply({
                                embeds: [queueList],
                                components: [pages],
                                fetchReply: true
                            })
                        } else if (i.customId == `prev`) {
                            n = n - 1
                            if (n <= 0) {
                                pages.components[0].setDisabled(true)
                                pages.components[1].setDisabled(true)
                            } else {
                                pages.components[0].setDisabled(false)
                                pages.components[1].setDisabled(false)
                            }
                            list = listS.slice(0 + (n * 10), 10 + (n * 10))
                            queueList.setDescription(`${list.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            pages.components[2].setDisabled(false)
                            pages.components[3].setDisabled(false)
                            pages.components[4].setDisabled(false)
                            await i.deferUpdate()
                            await interaction.editReply({
                                embeds: [queueList],
                                components: [pages],
                                fetchReply: true
                            })
                        } else if (i.customId == `stop`) {
                            i.deferUpdate()
                            collector.stop()
                        } else if (i.customId == `next`) {
                            n = n + 1
                            if (n >= totalPages - 1) {
                                pages.components[3].setDisabled(true)
                                pages.components[4].setDisabled(true)
                            } else {
                                pages.components[3].setDisabled(false)
                                pages.components[4].setDisabled(false)
                            }
                            list = listS.slice(0 + (n * 10), 10 + (n * 10))
                            queueList.setDescription(`${list.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            pages.components[0].setDisabled(false)
                            pages.components[1].setDisabled(false)
                            pages.components[2].setDisabled(false)
                            await i.deferUpdate()
                            await interaction.editReply({
                                embeds: [queueList],
                                components: [pages],
                                fetchReply: true
                            })
                        } else if (i.customId == `last`) {
                            n = totalPages - 1
                            list = listS.slice(0 + (n * 10), 10 + (n * 10))
                            queueList.setDescription(`${list.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            pages.components[0].setDisabled(false)
                            pages.components[1].setDisabled(false)
                            pages.components[2].setDisabled(false)
                            pages.components[3].setDisabled(true)
                            pages.components[4].setDisabled(true)
                            await i.deferUpdate()
                            await interaction.editReply({
                                embeds: [queueList],
                                components: [pages],
                                fetchReply: true
                            })
                        }
                    } else {
                        b = n
                        let ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                        const queueListEph = new EmbedBuilder()
                            .setTitle(`–û—á–µ—Ä–µ–¥—å –ø–µ—Å–µ–Ω`)
                            .setDescription(`${ephList.join(`\n`)}`)
                            .setTimestamp(Date.now())
                            .setColor(process.env.bot_color)
                            .setThumbnail(guild.iconURL())
                            .setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })

                        const ephpages = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`firsteph`)
                                    .setEmoji(`‚è™`)
                                    .setStyle(ButtonStyle.Danger)
                                    .setDisabled(true)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`preveph`)
                                    .setEmoji(`‚¨Ö`)
                                    .setStyle(ButtonStyle.Danger)
                                    .setDisabled(true)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`stopeph`)
                                    .setEmoji(`‚èπ`)
                                    .setStyle(ButtonStyle.Secondary)
                                    .setDisabled(false)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`nexteph`)
                                    .setEmoji(`‚û°`)
                                    .setStyle(ButtonStyle.Success)
                                    .setDisabled(false)
                            )
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`lasteph`)
                                    .setEmoji(`‚è©`)
                                    .setStyle(ButtonStyle.Success)
                                    .setDisabled(false)
                            )
                        if (i.customId == `first`) {

                            b = 0
                            ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[0].setDisabled(true)
                            ephpages.components[1].setDisabled(true)
                            ephpages.components[2].setDisabled(false)
                            ephpages.components[3].setDisabled(false)
                            ephpages.components[4].setDisabled(false)

                        } else if (i.customId == `prev`) {

                            b = b - 1
                            if (b <= 0) {
                                ephpages.components[0].setDisabled(true)
                                ephpages.components[1].setDisabled(true)
                            } else {
                                ephpages.components[0].setDisabled(false)
                                ephpages.components[1].setDisabled(false)
                            }
                            ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[2].setDisabled(false)
                            ephpages.components[3].setDisabled(false)
                            ephpages.components[4].setDisabled(false)

                        } else if (i.customId == `stop`) {

                            ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[0].setDisabled(true)
                            ephpages.components[1].setDisabled(true)
                            ephpages.components[2].setDisabled(true)
                            ephpages.components[3].setDisabled(true)
                            ephpages.components[4].setDisabled(true)

                        } else if (i.customId == `next`) {

                            b = b + 1
                            if (b >= totalPages - 1) {
                                ephpages.components[3].setDisabled(true)
                                ephpages.components[4].setDisabled(true)
                            } else {
                                ephpages.components[3].setDisabled(false)
                                ephpages.components[4].setDisabled(false)
                            }
                            ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[0].setDisabled(false)
                            ephpages.components[1].setDisabled(false)
                            ephpages.components[2].setDisabled(false)

                        } else if (i.customId == `last`) {

                            b = totalPages - 1
                            ephList = listS.slice(0 + (n * 10), 10 + (n * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[0].setDisabled(false)
                            ephpages.components[1].setDisabled(false)
                            ephpages.components[2].setDisabled(false)
                            ephpages.components[3].setDisabled(true)
                            ephpages.components[4].setDisabled(true)

                        }
                        const ephReply = await i.deferReply({
                            ephemeral: true,
                            fetchReply: true
                        })
                        await i.editReply({
                            embeds: [queueListEph],
                            components: [ephpages],
                            fetchReply: true,
                        })

                        const ephCollector = ephReply.createMessageComponentCollector({ componentType: ComponentType.Button, time: 120000 })

                        ephCollector.on(`collect`, async (int) => {
                            if (int.customId == `firsteph`) {
                                b = 0
                                ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                                queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                    text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                                })
                                ephpages.components[0].setDisabled(true)
                                ephpages.components[1].setDisabled(true)
                                ephpages.components[2].setDisabled(false)
                                ephpages.components[3].setDisabled(false)
                                ephpages.components[4].setDisabled(false)
                                await int.deferUpdate()
                                await i.editReply({
                                    embeds: [queueListEph],
                                    components: [ephpages],
                                    fetchReply: true
                                })
                            } else if (int.customId == `preveph`) {
                                b = b - 1
                                if (b <= 0) {
                                    ephpages.components[0].setDisabled(true)
                                    ephpages.components[1].setDisabled(true)
                                } else {
                                    ephpages.components[0].setDisabled(false)
                                    ephpages.components[1].setDisabled(false)
                                }
                                ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                                queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                    text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                                })
                                ephpages.components[2].setDisabled(false)
                                ephpages.components[3].setDisabled(false)
                                ephpages.components[4].setDisabled(false)
                                await int.deferUpdate()
                                await i.editReply({
                                    embeds: [queueListEph],
                                    components: [ephpages],
                                    fetchReply: true
                                })
                            } else if (int.customId == `stopeph`) {
                                int.deferUpdate()
                                ephCollector.stop()
                            } else if (int.customId == `nexteph`) {
                                b = b + 1
                                if (b >= totalPages - 1) {
                                    ephpages.components[3].setDisabled(true)
                                    ephpages.components[4].setDisabled(true)
                                } else {
                                    ephpages.components[3].setDisabled(false)
                                    ephpages.components[4].setDisabled(false)
                                }
                                ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                                queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                    text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                                })
                                ephpages.components[0].setDisabled(false)
                                ephpages.components[1].setDisabled(false)
                                ephpages.components[2].setDisabled(false)
                                await int.deferUpdate()
                                await i.editReply({
                                    embeds: [queueListEph],
                                    components: [ephpages],
                                    fetchReply: true
                                })
                            } else if (int.customId == `lasteph`) {
                                b = totalPages - 1
                                ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                                queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                    text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                                })
                                ephpages.components[0].setDisabled(false)
                                ephpages.components[1].setDisabled(false)
                                ephpages.components[2].setDisabled(false)
                                ephpages.components[3].setDisabled(true)
                                ephpages.components[4].setDisabled(true)
                                await int.deferUpdate()
                                await i.editReply({
                                    embeds: [queueListEph],
                                    components: [ephpages],
                                    fetchReply: true
                                })
                            }
                        })
                        ephCollector.on(`end`, async (coll) => {
                            b = b
                            ephList = listS.slice(0 + (b * 10), 10 + (b * 10))
                            queueListEph.setDescription(`${ephList.join(`\n`)}`).setFooter({
                                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${b + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                            })
                            ephpages.components[0].setDisabled(true)
                            ephpages.components[1].setDisabled(true)
                            ephpages.components[2].setDisabled(true)
                            ephpages.components[3].setDisabled(true)
                            ephpages.components[4].setDisabled(true)
                            await i.editReply({
                                embeds: [queueListEph],
                                components: [ephpages]
                            })
                        })

                    }

                })
                collector.on(`end`, async (collected) => {
                    n = n
                    list = listS.slice(0 + (n * 10), 10 + (n * 10))
                    queueList.setDescription(`${list.join(`\n`)}`).setFooter({
                        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${n + 1}/${totalPages} - ${queue.songs.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`
                    })
                    pages.components[0].setDisabled(true)
                    pages.components[1].setDisabled(true)
                    pages.components[2].setDisabled(true)
                    pages.components[3].setDisabled(true)
                    pages.components[4].setDisabled(true)
                    await interaction.editReply({
                        embeds: [queueList],
                        components: [pages]
                    })
                })
            }
                break;
            case `nowplaying`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })

                let song = queue.songs[0]
                const playing = new EmbedBuilder()
                    .setColor(process.env.bot_color)
                    .setTitle(`–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç... üé∂`)
                    .setTimestamp(Date.now())
                    .setDescription(`**–ù–∞–∑–≤–∞–Ω–∏–µ**: \`${song.name}\`
**–ó–∞–ø—Ä–æ—Å–∏–ª**: ${song.user}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: \`${queue.formattedCurrentTime}\`/\`${song.formattedDuration}\`

**–õ–∞–π–∫–æ–≤**: ${song.likes}üëç
**–î–∏–∑–ª–∞–π–∫–æ–≤**: ${song.dislikes}üëé

[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É](${song.url})`)

                const prevnext = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`prevsong`)
                            .setLabel(`–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Å–Ω—è`)
                            .setStyle(ButtonStyle.Danger)
                            .setEmoji(`‚èÆ`)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`nextsong`)
                            .setLabel(`–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è`)
                            .setStyle(ButtonStyle.Success)
                            .setEmoji(`‚è≠`)
                    )

                const msg = await interaction.reply({
                    embeds: [playing],
                    components: [prevnext],
                    fetchReply: true
                })

                const filter = (i) => i.user.id === interaction.user.id

                const collector = msg.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 30000 })
                let songR = queue.song[0]
                collector.on('collect', async (i) => {

                    await i.deferReply({
                        fetchReply: true
                    })
                    if (i.customId == `prevsong`) {
                        try {
                            songR = await queue.previous()
                            const result = new EmbedBuilder()
                                .setTitle(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Å–Ω—é... ‚úÖ`)
                                .setColor(process.env.bot_color)
                                .setTimestamp(Date.now())
                                .setDescription(`–í—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏–ª–∏ \`${songR.name}\`!`)

                            await i.editReply({
                                embeds: [result]
                            })
                        } catch (e) {
                            await i.editReply({
                                content: `–í—ã —É–∂–µ –≤–∫–ª—é—á–∏–ª–∏ —Å–∞–º—É—é –ø–µ—Ä–≤—É—é –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥–∏!`
                            })
                            console.log(e)
                        }

                        collector.stop()
                    } else if (i.customId == `nextsong`) {
                        try {
                            const result = new EmbedBuilder()
                                .setTitle(`–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞... ‚úÖ`)
                                .setColor(process.env.bot_color)
                                .setTimestamp(Date.now())
                                .setDescription(`–¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è \`${queue.songs[0].name}\` –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞!`)
                            songR = await queue.skip()

                            await i.editReply({
                                embeds: [result]
                            })
                        } catch (e) {
                            await i.editReply({
                                content: `–í –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Å–µ–Ω –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞!`
                            })
                            console.log(e)
                        }
                        collector.stop()
                    }
                })
                collector.on('end', async (collected) => {
                    prevnext.components[0].setDisabled(true)
                    prevnext.components[1].setDisabled(true)
                    playing.setDescription(`**–ù–∞–∑–≤–∞–Ω–∏–µ**: \`${songR.name}\`
**–ó–∞–ø—Ä–æ—Å–∏–ª**: ${songR.user}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: \`${queue.formattedCurrentTime}\`/\`${songR.formattedDuration}\`

**–õ–∞–π–∫–æ–≤**: ${songR.likes}üëç
**–î–∏–∑–ª–∞–π–∫–æ–≤**: ${songR.dislikes}üëé

[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É](${songR.url})`)
                    await interaction.editReply({
                        embeds: [playing],
                        components: [prevnext]
                    })
                })

            }
                break;
            case `volume`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })

                const volume = interaction.options.getInteger(`—á–∏—Å–ª–æ`)
                if (volume < 0 || volume > 100) return interaction.reply({
                    content: `–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–≤—É–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100!`,
                    ephemeral: true
                })

                queue.setVolume(volume)
                const result = new EmbedBuilder()
                    .setTitle(`–ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞... üîä`)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ \`${volume}\`!`)

                await interaction.reply({
                    embeds: [result]
                })
            }
                break;
            case `skip`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })
                try {
                    const result = new EmbedBuilder()
                        .setTitle(`–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞... ‚úÖ`)
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())
                        .setDescription(`–¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è \`${queue.songs[0].name}\` –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞!`)
                    queue.skip()

                    await interaction.reply({
                        embeds: [result]
                    })
                } catch (e) {
                    await interaction.reply({
                        content: `–í –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Å–µ–Ω –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞!`
                    })
                    console.log(e)
                }

            }
                break;
            case `previous`: {


                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })
                try {
                    const song = await queue.previous()
                    const result = new EmbedBuilder()
                        .setTitle(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Å–Ω—é... ‚úÖ`)
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())
                        .setDescription(`–í—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏–ª–∏ \`${song.name}\`!`)

                    await interaction.reply({
                        embeds: [result]
                    })
                } catch (e) {
                    await interaction.reply({
                        content: `–í—ã —É–∂–µ –≤–∫–ª—é—á–∏–ª–∏ —Å–∞–º—É—é –ø–µ—Ä–≤—É—é –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥–∏!`
                    })
                    console.log(e)
                }

            }
                break;
            case `join`: {
                let voiceChannel = interaction.member.voice.channel

                client.distube.voices.join(voiceChannel).then(async (connection) => {
                    await connection.setSelfDeaf(false)
                    await connection.setSelfMute(false)
                })
                const result = new EmbedBuilder()
                    .setTitle(`–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è üëã`)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É! –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/music play\`!`)

                await interaction.reply({
                    embeds: [result]
                })
            }
                break;
            case `leave`: {
                client.distube.voices.leave(guild)
                await interaction.deferReply({
                    fetchReply: true
                })
                await interaction.deleteReply()
            }
                break;
            case `pause`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })

                if (queue.paused) {
                    queue.resume()
                    const result = new EmbedBuilder()
                        .setTitle(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚è∏`)
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())
                        .setDescription(`–¢–∞–∫ –∫–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏ –µ–≥–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É, –ø—Ä–æ–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑.`)
                    return interaction.reply({
                        embeds: [result]
                    })
                }
                const result = new EmbedBuilder()
                    .setTitle(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂`)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –±—ã–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ–ø–∏—à–∏—Ç–µ \`/music resume\`!`)
                queue.pause()
                await interaction.reply({
                    embeds: [result]
                })

            }
                break;
            case `resume`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })

                if (queue.paused) {
                    queue.resume()
                    const result = new EmbedBuilder()
                        .setTitle(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚è∏`)
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())
                        .setDescription(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ–ø–∏—à–∏—Ç–µ \`/music pause\`!`)
                    return interaction.reply({
                        embeds: [result]
                    })
                } else if (queue.playing) {
                    const result = new EmbedBuilder()
                        .setTitle(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂`)
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())
                        .setDescription(`–¢–∞–∫ –∫–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –µ–≥–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑.`)
                    queue.pause()
                    return interaction.reply({
                        embeds: [result]
                    })
                }

            }
                break;
            case `stop`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })
                await queue.stop()
                const result = new EmbedBuilder()
                    .setTitle(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂`)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`.`)

                await interaction.reply({
                    embeds: [result]
                })
            }
                break;
            case `shuffle`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })

                await queue.shuffle()
                const result = new EmbedBuilder()
                    .setTitle(`–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞ üîÄ`)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                    .setDescription(`–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!`)

                await interaction.reply({
                    embeds: [result]
                })
            }
                break;
            case `loop`: {
                const no_queue = new EmbedBuilder()
                    .setTitle(`‚ùó –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏!`)
                    .setDescription(`–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/music play\`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å!`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                const queue = client.distube.getQueue(guild)
                if (!queue) return interaction.reply({
                    embeds: [no_queue]
                })
                let mode
                let value = Number(interaction.options.getString(`—Ä–µ–∂–∏–º`))
                switch (value) {
                    case 0: {
                        mode = `–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞`
                    }
                        break;
                    case 1: {
                        mode = `–ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏`
                    }
                        break;
                    case 2: {
                        mode = `–ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏`
                    }
                        break;

                    default:
                        break;
                }
                const setQueue = new EmbedBuilder()
                    .setTitle(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞`)
                    .setDescription(`–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ \`${mode}\``)
                    .setColor(process.env.bot_color)
                    .setTimestamp(Date.now())
                await client.distube.setRepeatMode(guild, value)
                await interaction.reply({
                    embeds: [setQueue]
                })
            }
                break;

            default:
                break;
        }
    }
};