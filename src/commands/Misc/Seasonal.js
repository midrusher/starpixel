const { Birthday } = require(`../../schemas/birthday`)
const { Temp } = require(`../../schemas/temp_items`)
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const chalk = require(`chalk`)
const cron = require(`node-cron`)
const ch_list = require(`../../discord structure/channels.json`)
const { EmbedBuilder, SlashCommandBuilder } = require("discord.js")
const { execute } = require('../../events/client/start_bot/ready');
const { achievementStats } = require(`../../functions`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName(`seasonal`)
        .setDescription(`–ö–æ–º–∞–Ω–¥—ã —Å–µ–∑–æ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`)
        .addSubcommandGroup(gr => gr
            .setName(`halloween`)
            .setDescription(`–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è`)
            .addSubcommand(sb => sb
                .setName(`achievement`)
                .setDescription(`–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`)
                .addStringOption(o => o
                    .setName(`–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ`)
                    .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å`)
                    .setRequired(true)
                    .setChoices(
                        {
                            name: `‚Ññ1. `,
                            value: `‚Ññ1. `
                        },
                        {
                            name: `‚Ññ2. `,
                            value: `‚Ññ2. `
                        },
                        {
                            name: `‚Ññ3. `,
                            value: `‚Ññ3. `
                        },
                        {
                            name: `‚Ññ4. `,
                            value: `‚Ññ4. `
                        },
                        {
                            name: `‚Ññ5. `,
                            value: `‚Ññ5. `
                        },

                    )
                )
            )
            .addSubcommand(sb => sb
                .setName(`stats`)
                .setDescription(`–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö—ç–ª–ª–æ—É–∏–Ω—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`)
                .addUserOption(o => o
                    .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                    .setDescription(`–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`))
            )
            .addSubcommand(sb => sb
                .setName(`leaderboards`)
                .setDescription(`–õ—É—á—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥ –•—ç–ª–ª–æ—É–∏–Ω–∞`)
            )
        ),
    async execute(interaction, client) {
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        if (guildData.plugins.seasonal === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
        const member = interaction.guild.member
        
        switch (interaction.options.getSubcommandGroup()) {
            case `halloween`: {
                if (guildData.seasonal.halloween.enabled === false) return interaction.reply({
                    content: `–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –•—ç–ª–ª–æ—É–∏–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ø–µ—Ä–∏–æ–¥ **7 –æ–∫—Ç—è–±—Ä—è –ø–æ 7 –Ω–æ—è–±—Ä—è**!`,
                    ephemeral: true
                })

                switch (interaction.options.getSubcommand()) {
                    case `achievement`: {
                        const userData = await User.findOne({ userid: interaction.user.id, guildid: interaction.guild.id })
                        const achievement = interaction.options.getString(`–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ`)
                        switch (achievement) {
                            case ``: {
                                const already_done = new EmbedBuilder()
                                    .setColor(`DarkRed`)
                                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                                    .setAuthor({
                                        name: `‚ùó –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`
                                    })
                                    .setDescription(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –µ–≥–æ! –ù–∞–π—Ç–∏ –µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.
    
–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ <#${ch_list.ask}>!`)


                                if (userData.seasonal.halloween.achievements === true) return interaction.reply({
                                    embeds: [already_done],
                                    ephemeral: true
                                })

                                const no_condition = new EmbedBuilder()
                                    .setColor(`DarkRed`)
                                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                                    .setAuthor({
                                        name: `‚ùó –í—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!`
                                    })
                                    .setDescription(`–í—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ <#${ch_list.achs}>.
    
–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ <#${ch_list.ask}>!`)
                                    .setTimestamp(Date.now())

                                if (!member.roles.cache.has(`521248091853291540`)) return interaction.reply({
                                    embeds: [no_condition],
                                    ephemeral: true
                                })
                                let reward = `893932177799135253`
                                const has_reward = new EmbedBuilder()
                                    .setColor(`DarkRed`)
                                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                                    .setAuthor({
                                        name: `‚ùó –í—ã –∏–º–µ–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`
                                    })
                                    .setDescription(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ <@&${reward}>, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.
    
    –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ <#${ch_list.ask}>!`)
                                    .setTimestamp(Date.now())
                                if (member.roles.cache.has(reward)) return interaction.reply({
                                    embeds: [has_reward],
                                    ephemeral: true
                                })
                                userData.seasonal.halloween.achievements.num1 = true
                                await member.roles.add(reward)
                                userData.rank += 50
                                userData.exp += 300;
                                userData.seasonal.halloween.points += 5
                                userData.save()
                                const condition_meet = new EmbedBuilder()
                                    .setColor(process.env.bot_color)
                                    .setThumbnail(`https://i.imgur.com/Xa6HxCU.png`)
                                    .setTitle(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`)
                                    .setTimestamp(Date.now())
                                    .setDescription(`${member} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ \`${interaction.options.getString(`–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ`)}\`!
–û–Ω —É–∂–µ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –•–æ—á–µ—à—å –∏ —Ç—ã? –¢–æ–≥–¥–∞ —Ç–µ–±–µ –≤ <#1029662737497866300>

–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/seasonal halloween stats\`!`)


                                await interaction.guild.channels.cache.get(ch_list.act).send(
                                    `‚ïí‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïï
${member} +300 üåÄ
\`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\`
‚ïò‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïõ`)

                                await interaction.guild.channels.cache.get(ch_list.rank).send(
                                    `‚ïí‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïï
${member} +50 üí†
\`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\`
‚ïò‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïõ`)
                                await interaction.reply({
                                    embeds: [condition_meet]
                                })
                                console.log(chalk.magenta(`[–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ]` + chalk.gray(`: ${member.user.username} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${interaction.options.getString(`–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ`)}!`)))


                            }
                                break;
                            case ``: {

                            }
                                break;
                            case ``: {

                            }
                                break;
                            case ``: {

                            }
                                break;
                            case ``: {

                            }
                                break;

                            default:
                                break;
                        }
                    }
                        break;
                    case `stats`: {
                        const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`) || interaction.user
                        if (user.bot) return interaction.reply({
                            content: `${user} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º, –∞ –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ö—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–µ –æ—á–∫–∏ :'(`
                        })
                        const users = await User.find().then(users => {
                            return users.filter(async user => await interaction.guild.members.fetch(user.userid))
                        })
                        const sorts = users.sort((a, b) => {
                            return b.seasonal.halloween.points - a.seasonal.halloween.points
                        })
                        var i = 0
                        while (sorts[i].userid !== user.id) {
                            i++
                        }
                        const userData = await User.findOne({ userid: user.id, guildid: guild.id })
                        let rank = i + 1
                        const embed = new EmbedBuilder()
                        .setTitle(`–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                        .setDescription(`**–ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ**: ${rank}
**–û—á–∫–æ–≤**: ${userData.seasonal.halloween.points}
**–û—Ç–∫—Ä—ã—Ç–æ –∂—É—Ç–∫–∏—Ö –∫–æ—Ä–æ–±–æ–∫**: ${userData.seasonal.halloween.opened_scary}

**–î–û–°–¢–ò–ñ–ï–ù–ò–Ø**
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Ññ1**: ${achievementStats(userData.seasonal.halloween.achievements.num1)}
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Ññ2**: ${achievementStats(userData.seasonal.halloween.achievements.num2)}
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Ññ3**: ${achievementStats(userData.seasonal.halloween.achievements.num3)}
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Ññ4**: ${achievementStats(userData.seasonal.halloween.achievements.num4)}
**–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Ññ5**: ${achievementStats(userData.seasonal.halloween.achievements.num5)}`)
                        .setThumbnail(user.displayAvatarURL())
                        .setColor(process.env.bot_color)
                        .setTimestamp(Date.now())

                        await interaction.reply({
                            embeds: [embed]
                        })
                    }
                        break;
                    case `leaderboards`: {
                        await interaction.deferReply({
                            fetchReply: true
                        })
                        const users = await User.find({
                            seasonal: {
                                halloween: {
                                    points: {
                                        $gt: 0
                                    }
                                }
                            }
                        }).then(users => {
                            return users.filter(async user => await interaction.guild.members.fetch(user.userid))
                        })
                        const sort = users.sort((a, b) => {
                            return b.seasonal.halloween.points - a.seasonal.halloween.points
                        }).slice(0, 10)
                        let index = 1
                        const map = sort.map(async (user) => {
                            const tag = await interaction.guild.members.fetch(user.userid)
                            return `**${index++}.** ${tag} > ${user.seasonal.halloween.points} –æ—á–∫–æ–≤`
                        })
                        const mapProm = await Promise.all(map)


                        const embed = new EmbedBuilder()
                            .setColor(process.env.bot_color)
                            .setAuthor({
                                name: `–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ö—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–º –æ—á–∫–∞–º`
                            })
                            .setTimestamp(Date.now())
                            .setDescription(`${mapProm.join('\n')}`)

                        await interaction.editReply({
                            embeds: [embed]
                        })
                    }
                        break;

                    default:
                        break;
                }
            }
                break;

            default:
                break;
        }
    }
};